/*----- PROTECTED REGION ID(Pet7019.h) ENABLED START -----*/
//=============================================================================
//
// file :        Pet7019.h
//
// description : Include file for the Pet7019 class
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef Pet7019_H
#define Pet7019_H

#include <tango.h>
#include "ImplLibModbus.h"



/*----- PROTECTED REGION END -----*/	//	Pet7019.h

/**
 *  Pet7019 class description:
 *    
 */

namespace Pet7019_ns
{
/*----- PROTECTED REGION ID(Pet7019::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	Pet7019::Additional Class Declarations

class Pet7019 : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(Pet7019::Data Members) ENABLED START -----*/

  ImplLibModbus *mb;
  map<string, uint8_t> attr_to_channel;
  enum RegPet7019
  {
  	REGISTER_calibrationAI = 0x033e,
  	REGISTER_numberChannelDO = 0x0136,
  	REGISTER_numberChannelAI = 0x0140,
  	REGISTER_modelName = 0x022f,
  	REGISTER_value = 0x0000,
  	REGISTER_enabledPowerOnDO = 0x01b3,
  	REGISTER_enabledSafeDO = 0x0203,
  	REGISTER_functionAI = 0x0253,
  	REGISTER_rangeAI = 0x01ab,
  	REGISTER_reboot = 0x00e9,
  	REGISTER_ping = 0x022f
  };

/*----- PROTECTED REGION END -----*/	//	Pet7019::Data Members

//	Device property data members
public:
	//	ModuleID:	
	Tango::DevShort	moduleID;
	//	ModuleIP:	
	string	moduleIP;
	//	ModulePort:	
	Tango::DevShort	modulePort;

	bool	mandatoryNotDefined;

//	Attribute data members
public:
	Tango::DevBoolean	*attr_calibrationAI_read;
	Tango::DevShort	*attr_numberChannelDO_read;
	Tango::DevShort	*attr_numberChannelAI_read;
	Tango::DevLong	*attr_modelName_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	Pet7019(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	Pet7019(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	Pet7019(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~Pet7019() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();

	/*
	 *	Check if mandatory property has been set
	 */
	 void check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop);

//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : Pet7019::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : Pet7019::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute calibrationAI related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_calibrationAI(Tango::Attribute &attr);
	virtual void write_calibrationAI(Tango::WAttribute &attr);
	virtual bool is_calibrationAI_allowed(Tango::AttReqType type);
/**
 *	Attribute numberChannelDO related methods
 *	Description: 
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_numberChannelDO(Tango::Attribute &attr);
	virtual bool is_numberChannelDO_allowed(Tango::AttReqType type);
/**
 *	Attribute numberChannelAI related methods
 *	Description: 
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_numberChannelAI(Tango::Attribute &attr);
	virtual bool is_numberChannelAI_allowed(Tango::AttReqType type);
/**
 *	Attribute modelName related methods
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_modelName(Tango::Attribute &attr);
	virtual bool is_modelName_allowed(Tango::AttReqType type);

//	Dynamic attribute methods
public:

	/**
	 *	Attribute valueDO related methods
	 *	Description: 
	 *
	 *	Data type:	Tango::DevBoolean
	 *	Attr type:	Scalar
	 */
	virtual void read_valueDO(Tango::Attribute &attr);
	virtual void write_valueDO(Tango::WAttribute &attr);
	virtual bool is_valueDO_allowed(Tango::AttReqType type);
	void add_valueDO_dynamic_attribute(string attname);
	void remove_valueDO_dynamic_attribute(string attname);
	Tango::DevBoolean *get_valueDO_data_ptr(string &name);
	map<string,Tango::DevBoolean>	   valueDO_data;

	/**
	 *	Attribute enabledPowerOnDO related methods
	 *	Description: 
	 *
	 *	Data type:	Tango::DevBoolean
	 *	Attr type:	Scalar
	 */
	virtual void read_enabledPowerOnDO(Tango::Attribute &attr);
	virtual void write_enabledPowerOnDO(Tango::WAttribute &attr);
	virtual bool is_enabledPowerOnDO_allowed(Tango::AttReqType type);
	void add_enabledPowerOnDO_dynamic_attribute(string attname);
	void remove_enabledPowerOnDO_dynamic_attribute(string attname);
	Tango::DevBoolean *get_enabledPowerOnDO_data_ptr(string &name);
	map<string,Tango::DevBoolean>	   enabledPowerOnDO_data;

	/**
	 *	Attribute enabledSafeDO related methods
	 *	Description: 
	 *
	 *	Data type:	Tango::DevBoolean
	 *	Attr type:	Scalar
	 */
	virtual void read_enabledSafeDO(Tango::Attribute &attr);
	virtual void write_enabledSafeDO(Tango::WAttribute &attr);
	virtual bool is_enabledSafeDO_allowed(Tango::AttReqType type);
	void add_enabledSafeDO_dynamic_attribute(string attname);
	void remove_enabledSafeDO_dynamic_attribute(string attname);
	Tango::DevBoolean *get_enabledSafeDO_data_ptr(string &name);
	map<string,Tango::DevBoolean>	   enabledSafeDO_data;

	/**
	 *	Attribute functionAI related methods
	 *	Description: 
	 *
	 *	Data type:	Tango::DevBoolean
	 *	Attr type:	Scalar
	 */
	virtual void read_functionAI(Tango::Attribute &attr);
	virtual void write_functionAI(Tango::WAttribute &attr);
	virtual bool is_functionAI_allowed(Tango::AttReqType type);
	void add_functionAI_dynamic_attribute(string attname);
	void remove_functionAI_dynamic_attribute(string attname);
	Tango::DevBoolean *get_functionAI_data_ptr(string &name);
	map<string,Tango::DevBoolean>	   functionAI_data;

	/**
	 *	Attribute valueAI related methods
	 *	Description: 
	 *
	 *	Data type:	Tango::DevShort
	 *	Attr type:	Scalar
	 */
	virtual void read_valueAI(Tango::Attribute &attr);
	virtual bool is_valueAI_allowed(Tango::AttReqType type);
	void add_valueAI_dynamic_attribute(string attname);
	void remove_valueAI_dynamic_attribute(string attname);
	Tango::DevShort *get_valueAI_data_ptr(string &name);
	map<string,Tango::DevShort>	   valueAI_data;

	/**
	 *	Attribute rangeAI related methods
	 *	Description: 
	 *
	 *	Data type:	Tango::DevUChar
	 *	Attr type:	Scalar
	 */
	virtual void read_rangeAI(Tango::Attribute &attr);
	virtual void write_rangeAI(Tango::WAttribute &attr);
	virtual bool is_rangeAI_allowed(Tango::AttReqType type);
	void add_rangeAI_dynamic_attribute(string attname);
	void remove_rangeAI_dynamic_attribute(string attname);
	Tango::DevUChar *get_rangeAI_data_ptr(string &name);
	map<string,Tango::DevUChar>	   rangeAI_data;

	//--------------------------------------------------------
	/**
	 *	Method      : Pet7019::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command reboot related method
	 *	Description: 
	 *
	 */
	virtual void reboot();
	virtual bool is_reboot_allowed(const CORBA::Any &any);
	/**
	 *	Command ping related method
	 *	Description: 
	 *
	 */
	virtual void ping();
	virtual bool is_ping_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : Pet7019::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(Pet7019::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes

/*----- PROTECTED REGION END -----*/	//	Pet7019::Additional Method prototypes
};

/*----- PROTECTED REGION ID(Pet7019::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	Pet7019::Additional Classes Definitions

}	//	End of namespace

#endif   //	Pet7019_H
