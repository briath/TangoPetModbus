/*----- PROTECTED REGION ID(Pet7019StateMachine.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        Pet7019StateMachine.cpp
//
// description : State machine file for the Pet7019 class
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

#include <Pet7019.h>

/*----- PROTECTED REGION END -----*/	//	Pet7019::Pet7019StateMachine.cpp

//================================================================
//  States  |  Description
//================================================================
//  ON      |  
//  FAULT   |  


namespace Pet7019_ns
{
//=================================================
//		Attributes Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : Pet7019::is_calibrationAI_allowed()
 *	Description : Execution allowed for calibrationAI attribute
 */
//--------------------------------------------------------
bool Pet7019::is_calibrationAI_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Check access type.
	if ( type!=Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for WRITE 
		if (get_state()==Tango::FAULT)
		{
		/*----- PROTECTED REGION ID(Pet7019::calibrationAIStateAllowed_WRITE) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Pet7019::calibrationAIStateAllowed_WRITE
			return false;
		}
		return true;
	}
	else

	//	Check access type.
	if ( type==Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for READ 
		if (get_state()==Tango::FAULT)
		{
		/*----- PROTECTED REGION ID(Pet7019::calibrationAIStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Pet7019::calibrationAIStateAllowed_READ
			return false;
		}
		return true;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Pet7019::is_numberChannelDO_allowed()
 *	Description : Execution allowed for numberChannelDO attribute
 */
//--------------------------------------------------------
bool Pet7019::is_numberChannelDO_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Check access type.
	if ( type==Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for READ 
		if (get_state()==Tango::FAULT)
		{
		/*----- PROTECTED REGION ID(Pet7019::numberChannelDOStateAllowed_READ) ENABLED START -----*/
		
		/*----- PROTECTED REGION END -----*/	//	Pet7019::numberChannelDOStateAllowed_READ
			return false;
		}
		return true;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Pet7019::is_numberChannelAI_allowed()
 *	Description : Execution allowed for numberChannelAI attribute
 */
//--------------------------------------------------------
bool Pet7019::is_numberChannelAI_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Check access type.
	if ( type==Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for READ 
		if (get_state()==Tango::FAULT)
		{
		/*----- PROTECTED REGION ID(Pet7019::numberChannelAIStateAllowed_READ) ENABLED START -----*/
		
		/*----- PROTECTED REGION END -----*/	//	Pet7019::numberChannelAIStateAllowed_READ
			return false;
		}
		return true;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Pet7019::is_modelName_allowed()
 *	Description : Execution allowed for modelName attribute
 */
//--------------------------------------------------------
bool Pet7019::is_modelName_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Check access type.
	if ( type==Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for READ 
		if (get_state()==Tango::FAULT)
		{
		/*----- PROTECTED REGION ID(Pet7019::modelNameStateAllowed_READ) ENABLED START -----*/
		
		/*----- PROTECTED REGION END -----*/	//	Pet7019::modelNameStateAllowed_READ
			return false;
		}
		return true;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Pet7019::is_valueDO_allowed()
 *	Description : Execution allowed for valueDO attribute
 */
//--------------------------------------------------------
bool Pet7019::is_valueDO_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Check access type.
	if ( type!=Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for WRITE 
		if (get_state()==Tango::FAULT)
		{
		/*----- PROTECTED REGION ID(Pet7019::valueDOStateAllowed_WRITE) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Pet7019::valueDOStateAllowed_WRITE
			return false;
		}
		return true;
	}
	else

	//	Check access type.
	if ( type==Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for READ 
		if (get_state()==Tango::FAULT)
		{
		/*----- PROTECTED REGION ID(Pet7019::valueDOStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Pet7019::valueDOStateAllowed_READ
			return false;
		}
		return true;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Pet7019::is_enabledPowerOnDO_allowed()
 *	Description : Execution allowed for enabledPowerOnDO attribute
 */
//--------------------------------------------------------
bool Pet7019::is_enabledPowerOnDO_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Check access type.
	if ( type!=Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for WRITE 
		if (get_state()==Tango::FAULT)
		{
		/*----- PROTECTED REGION ID(Pet7019::enabledPowerOnDOStateAllowed_WRITE) ENABLED START -----*/
		
		/*----- PROTECTED REGION END -----*/	//	Pet7019::enabledPowerOnDOStateAllowed_WRITE
			return false;
		}
		return true;
	}
	else

	//	Check access type.
	if ( type==Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for READ 
		if (get_state()==Tango::FAULT)
		{
		/*----- PROTECTED REGION ID(Pet7019::enabledPowerOnDOStateAllowed_READ) ENABLED START -----*/
		
		/*----- PROTECTED REGION END -----*/	//	Pet7019::enabledPowerOnDOStateAllowed_READ
			return false;
		}
		return true;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Pet7019::is_enabledSafeDO_allowed()
 *	Description : Execution allowed for enabledSafeDO attribute
 */
//--------------------------------------------------------
bool Pet7019::is_enabledSafeDO_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Check access type.
	if ( type!=Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for WRITE 
		if (get_state()==Tango::FAULT)
		{
		/*----- PROTECTED REGION ID(Pet7019::enabledSafeDOStateAllowed_WRITE) ENABLED START -----*/
		
		/*----- PROTECTED REGION END -----*/	//	Pet7019::enabledSafeDOStateAllowed_WRITE
			return false;
		}
		return true;
	}
	else

	//	Check access type.
	if ( type==Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for READ 
		if (get_state()==Tango::FAULT)
		{
		/*----- PROTECTED REGION ID(Pet7019::enabledSafeDOStateAllowed_READ) ENABLED START -----*/
		
		/*----- PROTECTED REGION END -----*/	//	Pet7019::enabledSafeDOStateAllowed_READ
			return false;
		}
		return true;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Pet7019::is_functionAI_allowed()
 *	Description : Execution allowed for functionAI attribute
 */
//--------------------------------------------------------
bool Pet7019::is_functionAI_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Check access type.
	if ( type!=Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for WRITE 
		if (get_state()==Tango::FAULT)
		{
		/*----- PROTECTED REGION ID(Pet7019::functionAIStateAllowed_WRITE) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Pet7019::functionAIStateAllowed_WRITE
			return false;
		}
		return true;
	}
	else

	//	Check access type.
	if ( type==Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for READ 
		if (get_state()==Tango::FAULT)
		{
		/*----- PROTECTED REGION ID(Pet7019::functionAIStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Pet7019::functionAIStateAllowed_READ
			return false;
		}
		return true;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Pet7019::is_valueAI_allowed()
 *	Description : Execution allowed for valueAI attribute
 */
//--------------------------------------------------------
bool Pet7019::is_valueAI_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Check access type.
	if ( type==Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for READ 
		if (get_state()==Tango::FAULT)
		{
		/*----- PROTECTED REGION ID(Pet7019::valueAIStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Pet7019::valueAIStateAllowed_READ
			return false;
		}
		return true;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Pet7019::is_rangeAI_allowed()
 *	Description : Execution allowed for rangeAI attribute
 */
//--------------------------------------------------------
bool Pet7019::is_rangeAI_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Check access type.
	if ( type!=Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for WRITE 
		if (get_state()==Tango::FAULT)
		{
		/*----- PROTECTED REGION ID(Pet7019::rangeAIStateAllowed_WRITE) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Pet7019::rangeAIStateAllowed_WRITE
			return false;
		}
		return true;
	}
	else

	//	Check access type.
	if ( type==Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for READ 
		if (get_state()==Tango::FAULT)
		{
		/*----- PROTECTED REGION ID(Pet7019::rangeAIStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Pet7019::rangeAIStateAllowed_READ
			return false;
		}
		return true;
	}
	return true;
}


//=================================================
//		Commands Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : Pet7019::is_reboot_allowed()
 *	Description : Execution allowed for reboot attribute
 */
//--------------------------------------------------------
bool Pet7019::is_reboot_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Compare device state with not allowed states.
	if (get_state()==Tango::FAULT)
	{
	/*----- PROTECTED REGION ID(Pet7019::rebootStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Pet7019::rebootStateAllowed
		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Pet7019::is_ping_allowed()
 *	Description : Execution allowed for ping attribute
 */
//--------------------------------------------------------
bool Pet7019::is_ping_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ping command.
	/*----- PROTECTED REGION ID(Pet7019::pingStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Pet7019::pingStateAllowed
	return true;
}


/*----- PROTECTED REGION ID(Pet7019::Pet7019StateAllowed.AdditionalMethods) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	Pet7019::Pet7019StateAllowed.AdditionalMethods

}	//	End of namespace
