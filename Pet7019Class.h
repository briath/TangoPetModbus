/*----- PROTECTED REGION ID(Pet7019Class.h) ENABLED START -----*/
//=============================================================================
//
// file :        Pet7019Class.h
//
// description : Include for the Pet7019 root class.
//               This class is the singleton class for
//                the Pet7019 device class.
//               It contains all properties and methods which the 
//               Pet7019 requires only once e.g. the commands.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef Pet7019Class_H
#define Pet7019Class_H

#include <tango.h>
#include <Pet7019.h>


/*----- PROTECTED REGION END -----*/	//	Pet7019Class.h


namespace Pet7019_ns
{
/*----- PROTECTED REGION ID(Pet7019Class::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	Pet7019Class::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute calibrationAI class definition
class calibrationAIAttrib: public Tango::Attr
{
public:
	calibrationAIAttrib():Attr("calibrationAI",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~calibrationAIAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Pet7019 *>(dev))->read_calibrationAI(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<Pet7019 *>(dev))->write_calibrationAI(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Pet7019 *>(dev))->is_calibrationAI_allowed(ty);}
};

//	Attribute numberChannelDO class definition
class numberChannelDOAttrib: public Tango::Attr
{
public:
	numberChannelDOAttrib():Attr("numberChannelDO",
			Tango::DEV_SHORT, Tango::READ) {};
	~numberChannelDOAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Pet7019 *>(dev))->read_numberChannelDO(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Pet7019 *>(dev))->is_numberChannelDO_allowed(ty);}
};

//	Attribute numberChannelAI class definition
class numberChannelAIAttrib: public Tango::Attr
{
public:
	numberChannelAIAttrib():Attr("numberChannelAI",
			Tango::DEV_SHORT, Tango::READ) {};
	~numberChannelAIAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Pet7019 *>(dev))->read_numberChannelAI(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Pet7019 *>(dev))->is_numberChannelAI_allowed(ty);}
};

//	Attribute modelName class definition
class modelNameAttrib: public Tango::Attr
{
public:
	modelNameAttrib():Attr("modelName",
			Tango::DEV_LONG, Tango::READ) {};
	~modelNameAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Pet7019 *>(dev))->read_modelName(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Pet7019 *>(dev))->is_modelName_allowed(ty);}
};


//=========================================
//	Define classes for dynamic attributes
//=========================================
//	Attribute valueDO class definition
class valueDOAttrib: public Tango::Attr
{
public:
	valueDOAttrib(const string &att_name):Attr(att_name.c_str(), 
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~valueDOAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Pet7019 *>(dev))->read_valueDO(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<Pet7019 *>(dev))->write_valueDO(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Pet7019 *>(dev))->is_valueDO_allowed(ty);}
};

//	Attribute enabledPowerOnDO class definition
class enabledPowerOnDOAttrib: public Tango::Attr
{
public:
	enabledPowerOnDOAttrib(const string &att_name):Attr(att_name.c_str(), 
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~enabledPowerOnDOAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Pet7019 *>(dev))->read_enabledPowerOnDO(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<Pet7019 *>(dev))->write_enabledPowerOnDO(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Pet7019 *>(dev))->is_enabledPowerOnDO_allowed(ty);}
};

//	Attribute enabledSafeDO class definition
class enabledSafeDOAttrib: public Tango::Attr
{
public:
	enabledSafeDOAttrib(const string &att_name):Attr(att_name.c_str(), 
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~enabledSafeDOAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Pet7019 *>(dev))->read_enabledSafeDO(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<Pet7019 *>(dev))->write_enabledSafeDO(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Pet7019 *>(dev))->is_enabledSafeDO_allowed(ty);}
};

//	Attribute functionAI class definition
class functionAIAttrib: public Tango::Attr
{
public:
	functionAIAttrib(const string &att_name):Attr(att_name.c_str(), 
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~functionAIAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Pet7019 *>(dev))->read_functionAI(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<Pet7019 *>(dev))->write_functionAI(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Pet7019 *>(dev))->is_functionAI_allowed(ty);}
};

//	Attribute valueAI class definition
class valueAIAttrib: public Tango::Attr
{
public:
	valueAIAttrib(const string &att_name):Attr(att_name.c_str(), 
			Tango::DEV_SHORT, Tango::READ) {};
	~valueAIAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Pet7019 *>(dev))->read_valueAI(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Pet7019 *>(dev))->is_valueAI_allowed(ty);}
};

//	Attribute rangeAI class definition
class rangeAIAttrib: public Tango::Attr
{
public:
	rangeAIAttrib(const string &att_name):Attr(att_name.c_str(), 
			Tango::DEV_UCHAR, Tango::READ_WRITE) {};
	~rangeAIAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Pet7019 *>(dev))->read_rangeAI(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<Pet7019 *>(dev))->write_rangeAI(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Pet7019 *>(dev))->is_rangeAI_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command reboot class definition
class rebootClass : public Tango::Command
{
public:
	rebootClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	rebootClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~rebootClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Pet7019 *>(dev))->is_reboot_allowed(any);}
};

//	Command ping class definition
class pingClass : public Tango::Command
{
public:
	pingClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	pingClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~pingClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Pet7019 *>(dev))->is_ping_allowed(any);}
};


/**
 *	The Pet7019Class singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  Pet7019Class : public Tango::DeviceClass
#else
class Pet7019Class : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(Pet7019Class::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	Pet7019Class::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static Pet7019Class *init(const char *);
		static Pet7019Class *instance();
		~Pet7019Class();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		Pet7019Class(string &);
		static Pet7019Class *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	Pet7019_H
